<!DOCTYPE html><html lang="en"><head><script src="//g.alicdn.com/bizcharts/io-asserts/3.1.2/react16.0.0.production.min.js"></script>    <script src="//g.alicdn.com/bizcharts/io-asserts/3.1.2/react-dom16.0.0.production.min.js"></script>    <script src="//cdn.bootcss.com/babel-core/5.8.38/browser.min.js"></script>    <script src="//g.alicdn.com/bizcharts/io-asserts/3.1.5/BizCharts.min.js"> </script>    <script src="https://gw.alipayobjects.com/os/antv/assets/g2-brush/0.0.2/g2-brush.min.js"></script>    <script type="text/javascript" src="//gw.alipayobjects.com/os/antv/assets/data-set/0.8.6/data-set.min.js"></script>    <script type="text/javascript" src="https://gw.alipayobjects.com/as/g/datavis/assets/1.0.1/jquery-3.2.1.min.js"></script>    </head>    <body>    <div id="mountNode"></div>    <script type="text/babel">const { Chart, Geom, Axis, Tooltip, Coord, Label, Legend, View, Guide, Shape } = window.BizCharts;$.getJSON('/BizCharts/public/data/avg-temp.json', data => {    const {DataView} = DataSet;    const dv = new DataView();    dv.source(data)        .transform({            type: 'fold',            key: 'city',            value: 'value',            fields: ['New York', 'San Francisco', 'Austin']        });    const scale = {        date: {            type: 'time'        },        value: {            alias: 'Temperature, ºF'        }    }    let chart;    class RenderChart extends React.Component {        componentDidMount() {            new Brush({                canvas: chart.get('canvas'),                style: {                    fill: '#ccc',                    fillOpacity: 0.4                },                chart            });            chart.on('plotdblclick', () => {                chart.get('options').filters = {};                chart.repaint();            });        }        render() {            return (                <div>                <Chart            height={window.innerHeight}            data={dv}            padding={[60, 30, 30]}            scale={scale}            onGetG2Instance={g2Chart => {                g2Chart.animate(false);                chart = g2Chart;            }}            forceFit            >            <Axis            name="date"            line={{                stroke: '#000'            }}            tickLine={{                stroke: '#000',                    value: 6 // 刻度线长度            }}            label={{                textStyle: {                    textAlign: 'start'                }            }}            />            <Axis            name="value"            grid={null}            tickLine={{                stroke: '#000',                    value: 6 // 刻度线长度            }}            label={{                textStyle: {                    fill: '#000'                }            }}            line={{                stroke: '#000'            }}            />            <Legend            position="top"                />                <Geom type="line" position="date*value" color="city" shape="spline" size={2} />            <Geom type="area" position="time*rain" color="l(100) 0:#293c55 1:#f7f7f7" opacity={0.85} />            </Chart>            </div>        )        }    }    ReactDOM.render((        <RenderChart />    ), document.getElementById("mountNode"));});</script></body></html>